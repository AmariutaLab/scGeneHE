import pandas as pd
import numpy as np
import subprocess, os
import collections
from tqdm import tqdm
import fire

# python3 bootstrap_real.py --boot_rate 1.0 --n_boot 100 --gene_path /expanse/lustre/projects/ddp412/zix016/1k1k_h2/gwas_gene/gwas_gene_test.txt --ct_path /expanse/lustre/projects/ddp412/zix016/saige_h2/real_data/CD4_TEM/ --plink_path /expanse/lustre/projects/ddp412/kakamatsu/plink2 --cell_type CD4_TEM


def boot_real(
    boot_rate: float,
    n_boot: int,
    gene_path: str,
    pheno_path: str,
    fam_path: str,
    covar: list,
    bootstrap_path: str,
    out_str: str,
):
    """
    Conduct bootstrapping for each gene. To save memory and computation time, bootstrap covariates are maintained to be the same as point estimate covariates.

    :param boot_rate: randomly sampling how many percent of the cells with replacement
    :param n_boot: number of bootstraps
    :param gene_path: path to gene list that is required to contain a column named 'gene'
    :param pheno_path: path to the file contains all sample, the file is required to contain all covariates, the gene's expression, sample id as 'iid', and cell id as 'cid'
    :param fam_path: path to the fam file generated by plink
    :param covar: a list of covariates to be included in generating bootstrap covariates
    :param n_ge_pc: number of gene expression PCs
    :param n_geno_pc: number of genotype PCs
    :param bootstrap_path: path to save all the bootstrap files
    :param out_str: the output bootstrap file name
    """

    df_gene = pd.read_csv(gene_path, header=None, sep="\t")
    gene_list = df_gene["gene"].values

    for i_gene in gene_list:
        print("GENE " + i_gene)
        if not os.path.isfile(fam_path):
            continue
        try:
            print("Read in gene expression ... ")
            df_pheno = pd.read_csv(pheno_path, usecols=covar + [i_gene])
        except ValueError:
            print(
                "Usecols do not match columns, columns expected but not found", i_gene
            )
            continue

        df_fam = pd.read_csv(fam_path, usecols=[0, 1], sep="\t", header=None)
        df_fam.columns = ["fid", "iid"]
        df_pheno = pd.merge(df_pheno, df_fam, on="iid", how="outer")
        df_pheno.dropna(inplace=True)
        n_cells = df_pheno.shape[0]
        n_select = int(n_cells * boot_rate)

        print("Bootstrap with replacement ...")
        for i in tqdm(range(n_boot)):
            print("Create bootstrap files")
            boot_dir = bootstrap_path + "boot" + str(i) + "/"
            os.makedirs(boot_dir, exist_ok=True)

            # sampling with replacement
            chosen_idx = np.random.choice(n_cells, replace=True, size=n_select)
            df_boot = df_pheno.iloc[chosen_idx]
            df_boot = df_boot.drop_duplicates("cid")
            df_boot.dropna(inplace=True)
            df_id = df_boot[["fid", "iid"]].drop_duplicates()
            df_id.to_csv(
                boot_dir + out_str + "_id.txt",
                sep="\t",
                index=None,
                header=False,
            )
            df_boot[["cid", "iid"] + covar + [i_gene]].to_csv(
                boot_dir + out_str + "_pheno.txt", index=None
            )


if __name__ == "__main__":
    fire.Fire(boot_real)
